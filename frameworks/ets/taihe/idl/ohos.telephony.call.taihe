/*
 * Copyright (c) 2025-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@!sts_inject_into_module("import Context from 'application.Context';")
@!namespace("@ohos.telephony.call", "call")
@!sts_inject("""
static { loadLibraryWithPermissionCheck("telephony_call_taihe_native.z", "@ohos.telephony.call") }
""")

enum CallState: i32 {
    CALL_STATE_UNKNOWN = -1,
    CALL_STATE_IDLE = 0,
    CALL_STATE_RINGING = 1,
    CALL_STATE_OFFHOOK = 2,
    CALL_STATE_ANSWERED = 3
}
enum VideoStateType: i32 {
    TYPE_VOICE = 0,
    TYPE_VIDEO,
    TYPE_VIDEO_SEND_ONLY = 1,
    TYPE_VIDEO_RECEIVE_ONLY,
    TYPE_VIDEO_BIDIRECTIONAL,
}
enum CallType: i32 {
    TYPE_CS = 0,
    TYPE_IMS = 1,
    TYPE_OTT = 2,
    TYPE_ERR_CALL = 3,
    TYPE_VOIP = 4,
}
enum DetailedCallState: i32 {
    CALL_STATUS_ACTIVE = 0,
    CALL_STATUS_HOLDING = 1,
    CALL_STATUS_DIALING = 2,
    CALL_STATUS_ALERTING = 3,
    CALL_STATUS_INCOMING = 4,
    CALL_STATUS_WAITING = 5,
    CALL_STATUS_DISCONNECTED = 6,
    CALL_STATUS_DISCONNECTING = 7,
    CALL_STATUS_IDLE = 8
}
enum ConferenceState: i32 {
    TEL_CONFERENCE_IDLE = 0,
    TEL_CONFERENCE_ACTIVE,
    TEL_CONFERENCE_DISCONNECTING,
    TEL_CONFERENCE_DISCONNECTED,
}
enum CallAbilityEventId: i32 {
    EVENT_DIAL_NO_CARRIER = 1,
    EVENT_INVALID_FDN_NUMBER = 2,
    EVENT_HOLD_CALL_FAILED = 3,
    EVENT_SWAP_CALL_FAILED = 4,
    EVENT_COMBINE_CALL_FAILED = 5,
    EVENT_SPLIT_CALL_FAILED = 6,
    EVENT_SHOW_FULL_SCREEN = 7,
    EVENT_SHOW_FLOAT_WINDOW = 8,
}
enum DisconnectedReason: i32 {
    UNASSIGNED_NUMBER = 1,
    NO_ROUTE_TO_DESTINATION = 3,
    CHANNEL_UNACCEPTABLE = 6,
    OPERATOR_DETERMINED_BARRING = 8,
    CALL_COMPLETED_ELSEWHERE = 13,
    NORMAL_CALL_CLEARING = 16,
    USER_BUSY = 17,
    NO_USER_RESPONDING = 18,
    USER_ALERTING_NO_ANSWER = 19,
    CALL_REJECTED = 21,
    NUMBER_CHANGED = 22,
    CALL_REJECTED_DUE_TO_FEATURE_AT_THE_DESTINATION = 24,
    FAILED_PRE_EMPTION = 25,
    NON_SELECTED_USER_CLEARING = 26,
    DESTINATION_OUT_OF_ORDER = 27,
    INVALID_NUMBER_FORMAT = 28,
    FACILITY_REJECTED = 29,
    RESPONSE_TO_STATUS_ENQUIRY = 30,
    NORMAL_UNSPECIFIED = 31,
    NO_CIRCUIT_CHANNEL_AVAILABLE = 34,
    NETWORK_OUT_OF_ORDER = 38,
    TEMPORARY_FAILURE = 41,
    SWITCHING_EQUIPMENT_CONGESTION = 42,
    ACCESS_INFORMATION_DISCARDED = 43,
    REQUEST_CIRCUIT_CHANNEL_NOT_AVAILABLE = 44,
    RESOURCES_UNAVAILABLE_UNSPECIFIED = 47,
    QUALITY_OF_SERVICE_UNAVAILABLE = 49,
    REQUESTED_FACILITY_NOT_SUBSCRIBED = 50,
    INCOMING_CALLS_BARRED_WITHIN_THE_CUG = 55,
    BEARER_CAPABILITY_NOT_AUTHORIZED = 57,
    BEARER_CAPABILITY_NOT_PRESENTLY_AVAILABLE = 58,
    SERVICE_OR_OPTION_NOT_AVAILABLE_UNSPECIFIED = 63,
    BEARER_SERVICE_NOT_IMPLEMENTED = 65,
    ACM_EQUALTO_OR_GREATER_THAN_THE_MAXIMUM_VALUE = 68,
    REQUESTED_FACILITY_NOT_IMPLEMENTED = 69,
    ONLY_RESTRICTED_DIGITAL_INFO_BEARER_CAPABILITY_IS_AVAILABLE = 70,
    SERVICE_OR_OPTION_NOT_IMPLEMENTED_UNSPECIFIED = 79,
    INVALID_TRANSACTION_IDENTIFIER_VALUE = 81,
    USER_NOT_MEMBER_OF_CUG = 87,
    INCOMPATIBLE_DESTINATION = 88,
    INVALID_TRANSIT_NETWORK_SELECTION = 91,
    SEMANTICALLY_INCORRECT_MESSAGE = 95,
    INVALID_MANDATORY_INFORMATION = 96,
    MESSAGE_TYPE_NON_EXISTENT_OR_NOT_IMPLEMENTED = 97,
    MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 98,
    INFORMATION_ELEMENT_NON_EXISTENT_OR_NOT_IMPLEMENTED = 99,
    CONDITIONAL_IE_ERROR = 100,
    MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 101,
    RECOVERY_ON_TIMER_EXPIRED = 102,
    PROTOCOL_ERROR_UNSPECIFIED = 111,
    INTERWORKING_UNSPECIFIED = 127,
    CALL_BARRED = 240,
    FDN_BLOCKED = 241,
    IMSI_UNKNOWN_IN_VLR = 242,
    IMEI_NOT_ACCEPTED = 243,
    DIAL_MODIFIED_TO_USSD = 244,
    DIAL_MODIFIED_TO_SS = 245,
    DIAL_MODIFIED_TO_DIAL = 246,
    RADIO_OFF = 247,
    OUT_OF_SERVICE = 248,
    NO_VALID_SIM = 249,
    RADIO_INTERNAL_ERROR = 250,
    NETWORK_RESP_TIMEOUT = 251,
    NETWORK_REJECT = 252,
    RADIO_ACCESS_FAILURE = 253,
    RADIO_LINK_FAILURE = 254,
    RADIO_LINK_LOST = 255,
    RADIO_UPLINK_FAILURE = 256,
    RADIO_SETUP_FAILURE = 257,
    RADIO_RELEASE_NORMAL = 258,
    RADIO_RELEASE_ABNORMAL = 259,
    ACCESS_CLASS_BLOCKED = 260,
    NETWORK_DETACH = 261,
    INVALID_PARAMETER = 1025,
    SIM_NOT_EXIT = 1026,
    SIM_PIN_NEED = 1027,
    CALL_NOT_ALLOW = 1029,
    SIM_INVALID = 1045,
    UNKNOWN = 1279
}
enum MmiCodeResult: i32 {
    MMI_CODE_SUCCESS = 0,
    MMI_CODE_FAILED = 1
}
enum AudioDeviceType: i32 {
    DEVICE_EARPIECE,
    DEVICE_SPEAKER,
    DEVICE_WIRED_HEADSET,
    DEVICE_BLUETOOTH_SCO,
    DEVICE_DISTRIBUTED_AUTOMOTIVE
}
enum VideoRequestResultType: i32 {
    TYPE_REQUEST_SUCCESS = 0,
    TYPE_REQUEST_FAILURE,
    TYPE_REQUEST_INVALID,
    TYPE_REQUEST_TIMED_OUT,
    TYPE_REQUEST_REJECTED_BY_REMOTE,
    TYPE_REQUEST_UPGRADE_CANCELED,
    TYPE_DOWNGRADE_RTP_OR_RTCP_TIMEOUT = 100,
    TYPE_DOWNGRADE_RTP_AND_RTCP_TIMEOUT,
}
enum ImsCallMode: i32 {
    CALL_MODE_AUDIO_ONLY = 0,
    CALL_MODE_SEND_ONLY,
    CALL_MODE_RECEIVE_ONLY,
    CALL_MODE_SEND_RECEIVE,
    CALL_MODE_VIDEO_PAUSED,
}
enum CallSessionEventId: i32 {
    EVENT_CONTROL_CAMERA_FAILURE = 0,
    EVENT_CONTROL_CAMERA_READY,
    EVENT_DISPLAY_SURFACE_RELEASED = 100,
    EVENT_PREVIEW_SURFACE_RELEASED,
}

struct NumberFormatOptions {
    countryCode: String;
}
struct CallAttributeOptions {
    accountNumber: String;
    speakerphoneOn: bool;
    accountId: i32;
    videoState: VideoStateType;
    startTime: f64;
    isEcc: bool;
    callType: CallType;
    callId: i32;
    callState: DetailedCallState;
    conferenceState: ConferenceState;
    crsType: i32;
    originalCallType: i32;
    numberLocation: Optional<String>;
}
struct CallEventOptions {
    eventId: CallAbilityEventId;
}
struct DisconnectedDetails {
    reason: DisconnectedReason;
    message: String;
}
struct MmiCodeResults {
    result: MmiCodeResult;
    message: String;
}
struct AudioDevice {
    deviceType: AudioDeviceType;
    address: Optional<String>;
    deviceName: Optional<String>;
}
struct AudioDeviceCallbackInfo {
    audioDeviceList: Array<AudioDevice>;
    currentAudioDevice: AudioDevice;
    isMuted: bool;
}
struct ImsCallModeInfo {
    callId: i32;
    result: VideoRequestResultType;
    isRequestInfo: bool;
    imsCallMode: ImsCallMode;
}
struct CallSessionEvent {
    callId: i32;
    eventId: CallSessionEventId;
}
struct PeerDimensionsDetail {
    callId: i32;
    width: i32;
    height: i32;
}
struct CameraCapabilities {
    callId: i32;
    width: i32;
    height: i32;
}

@gen_async("makeCall")
@gen_promise("makeCall")
function MakeCallSync(phoneNumber: String): void;

@gen_promise("makeCall")
function MakeCallSync2(context: @sts_type("Context") Opaque, phoneNumber: String): void;

function HasVoiceCapability(): bool;

@gen_async("formatPhoneNumber")
@gen_promise("formatPhoneNumber")
function FormatPhoneNumberSync(phoneNumber: String, options: NumberFormatOptions): void;

@gen_async("formatPhoneNumber")
function FormatPhoneNumberSync2(phoneNumber: String): void;

function GetCallStateSync(): CallState;

function HasCallSync(): bool;

@!sts_inject("""
export function on(type: string, cb: (arg_0: Object) => void) {
    switch(type) {
        case "callDetailsChange": return OnCallDetailsChange(cb);
        case "callEventChange": return OnCallEventChange(cb);
        case "callDisconnectedCause": return OnCallDisconnectedCauses(cb);
        case "mmiCodeResult": return OnMmiCodeResult(cb);
        case "audioDeviceChange": return OnAudioDeviceChange(cb);
        case "postDialDelay": return OnPostDialDelay(cb);
        case "imsCallModeChange": return OnImsCallModeChange(cb);
        case "callSessionEvent": return OnCallSessionEvent(cb);
        case "peerDimensionsChange": return OnPeerDimensionsChange(cb);
        case "cameraCapabilitiesChange": return OnCameraCapabilitiesChange(cb);
        default: throw new Error(`Unknown type: ${type}`);
    }
}
export function off(type: string, cb?: (arg_0: Object) => void) {
    switch(type) {
        case "callDetailsChange": return OffCallDetailsChange(cb as (((data: CallAttributeOptions) => void) | undefined));
        case "callEventChange": return OffCallEventChange(cb as (((data: CallEventOptions) => void) | undefined));
        case "callDisconnectedCause": return OffCallDisconnectedCauses(cb as (((data: DisconnectedDetails) => void) | undefined));
        case "mmiCodeResult": return OffMmiCodeResult(cb as (((data: MmiCodeResults) => void) | undefined));
        case "audioDeviceChange": return OffAudioDeviceChange(cb as (((data: AudioDeviceCallbackInfo) => void) | undefined));
        case "postDialDelay": return OffPostDialDelay(cb as (((data: string) => void) | undefined));
        case "imsCallModeChange": return OffImsCallModeChange(cb as (((data: ImsCallModeInfo) => void) | undefined));
        case "callSessionEvent": return OffCallSessionEvent(cb as (((data: CallSessionEvent) => void) | undefined));
        case "peerDimensionsChange": return OffPeerDimensionsChange(cb as (((data: PeerDimensionsDetail) => void) | undefined));
        case "cameraCapabilitiesChange": return OffCameraCapabilitiesChange(cb as (((data: CameraCapabilities) => void) | undefined));
        default: throw new Error(`Unknown type: ${type}`);
    }
}
""")

// 通话详情变化回调
function OnCallDetailsChange(callback: (data: CallAttributeOptions) => void): void;
function OffCallDetailsChange(callback: Optional<(data: CallAttributeOptions) => void>): void;

// 通话事件变化回调
function OnCallEventChange(callback: (data: CallEventOptions) => void): void;
function OffCallEventChange(callback: Optional<(data: CallEventOptions) => void>): void;

// 通话断开原因回调
function OnCallDisconnectedCauses(callback: (data: DisconnectedDetails) => void): void;
function OffCallDisconnectedCauses(callback: Optional<(data: DisconnectedDetails) => void>): void;

// MMI码结果回调
function OnMmiCodeResult(callback: (data: MmiCodeResults) => void): void;
function OffMmiCodeResult(callback: Optional<(data: MmiCodeResults) => void>): void;

// 音频设备变化回调
function OnAudioDeviceChange(callback: (data: AudioDeviceCallbackInfo) => void): void;
function OffAudioDeviceChange(callback: Optional<(data: AudioDeviceCallbackInfo) => void>): void;

// 拨号后延迟回调
function OnPostDialDelay(callback: (data: String) => void): void;
function OffPostDialDelay(callback: Optional<(data: String) => void>): void;

// IMS通话模式变化回调
function OnImsCallModeChange(callback: (data: ImsCallModeInfo) => void): void;
function OffImsCallModeChange(callback: Optional<(data: ImsCallModeInfo) => void>): void;

// 通话会话事件回调
function OnCallSessionEvent(callback: (data: CallSessionEvent) => void): void;
function OffCallSessionEvent(callback: Optional<(data: CallSessionEvent) => void>): void;

// 对端尺寸变化回调
function OnPeerDimensionsChange(callback: (data: PeerDimensionsDetail) => void): void;
function OffPeerDimensionsChange(callback: Optional<(data: PeerDimensionsDetail) => void>): void;

// 相机能力变化回调
function OnCameraCapabilitiesChange(callback: (data: CameraCapabilities) => void): void;
function OffCameraCapabilitiesChange(callback: Optional<(data: CameraCapabilities) => void>): void;